#!/usr/bin/env python3
"""
Script de lancement simple du pipeline MLOps
Ex√©cute directement les modules Python sans subprocess
"""
import sys
import os
from pathlib import Path
import time
import webbrowser
import threading

# Ajouter le r√©pertoire racine au path
project_root = Path(__file__).parent
sys.path.append(str(project_root))

def run_pipeline_step(module_path, description):
    """Ex√©cuter une √©tape du pipeline"""
    print(f"\nüîÑ {description}...")
    print(f"   Module: {module_path}")
    
    try:
        # Changer le r√©pertoire de travail
        original_cwd = os.getcwd()
        os.chdir(project_root)
        
        # Importer et ex√©cuter le module
        if module_path == "src.features.advanced_features":
            from src.features.advanced_features import advanced_feature_engineering
            from config.config import config
            advanced_feature_engineering(
                config.data.raw_data_path,
                config.data.processed_data_path
            )
            
        elif module_path == "src.models.advanced_training":
            from src.models.advanced_training import train_advanced_models
            train_advanced_models()
            
        elif module_path == "src.models.advanced_evaluation":
            from src.models.advanced_evaluation import evaluate_saved_model
            from config.config import config
            model_path = f"{config.model.model_dir}/best_model.joblib"
            if Path(model_path).exists():
                evaluate_saved_model(model_path, config.data.processed_data_path)
            else:
                print("‚ö†Ô∏è Mod√®le non trouv√©, ignor√©")
        
        print(f"‚úÖ {description} - Termin√© avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå {description} - Erreur: {e}")
        return False
    finally:
        # Restaurer le r√©pertoire de travail
        os.chdir(original_cwd)

def check_data_exists():
    """V√©rifier si les donn√©es existent"""
    raw_data = Path("data/raw/GermanCredit.csv")
    if raw_data.exists():
        print("‚úÖ Donn√©es brutes trouv√©es")
        return True
    else:
        print("üì• T√©l√©chargement des donn√©es...")
        try:
            from src.data.download import download_german_credit
            download_german_credit()
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors du t√©l√©chargement: {e}")
            return False

def launch_api_service():
    """Lancer l'API en tant que service"""
    try:
        print("üîÑ D√©marrage de l'API...")
        from api.prediction_api import app
        app.run(host='0.0.0.0', port=5000, debug=False)
    except Exception as e:
        print(f"‚ùå Erreur API: {e}")

def launch_dashboard_service():
    """Lancer le dashboard"""
    import subprocess
    try:
        print("üîÑ D√©marrage du dashboard...")
        subprocess.run([
            "streamlit", "run", "dashboard/ml_dashboard.py",
            "--server.port", "8501",
            "--server.headless", "true"
        ])
    except Exception as e:
        print(f"‚ùå Erreur Dashboard: {e}")

def open_browser():
    """Ouvrir les onglets du navigateur"""
    time.sleep(5)
    try:
        webbrowser.open('http://localhost:8501')
        print("‚úÖ Dashboard ouvert: http://localhost:8501")
        time.sleep(2)
        webbrowser.open('http://localhost:5000/health')
        print("‚úÖ API health check ouvert: http://localhost:5000/health")
    except Exception as e:
        print(f"‚ö†Ô∏è Ouverture navigateur √©chou√©e: {e}")
        print("üìã Ouvrez manuellement:")
        print("   - Dashboard: http://localhost:8501")
        print("   - API: http://localhost:5000/health")

def main():
    """Fonction principale"""
    print("üéØ PIPELINE MLOPS - GERMAN CREDIT RISK PREDICTION")
    print("=" * 60)
    
    # V√©rifier les donn√©es
    if not check_data_exists():
        print("‚ùå Impossible de continuer sans donn√©es")
        return
    
    # Demander confirmation
    response = input("\n‚ùì Ex√©cuter le pipeline ML complet ? (y/n): ").lower().strip()
    
    if response == 'y':
        print("\nüöÄ EX√âCUTION DU PIPELINE ML")
        print("=" * 60)
        
        # √âtapes du pipeline
        steps = [
            ("src.features.advanced_features", "Feature Engineering Avanc√©"),
            ("src.models.advanced_training", "Entra√Ænement des Mod√®les"),
            ("src.models.advanced_evaluation", "√âvaluation des Mod√®les")
        ]
        
        results = []
        for module_path, description in steps:
            success = run_pipeline_step(module_path, description)
            results.append(success)
        
        if all(results):
            print("\n‚úÖ Pipeline ML termin√© avec succ√®s !")
        else:
            print("\n‚ö†Ô∏è Pipeline termin√© avec des erreurs")
    
    # Lancer les services
    print("\nüåê LANCEMENT DES SERVICES")
    print("=" * 60)
    
    choice = input("\nChoisissez une option:\n1. API seulement\n2. Dashboard seulement\n3. Les deux\n4. Aucun\nChoix (1-4): ").strip()
    
    if choice in ['1', '3']:
        # Lancer l'API dans un thread
        api_thread = threading.Thread(target=launch_api_service, daemon=True)
        api_thread.start()
        print("üöÄ API d√©marr√©e en arri√®re-plan sur http://localhost:5000")
    
    if choice in ['2', '3']:
        # Lancer le navigateur dans un thread
        browser_thread = threading.Thread(target=open_browser, daemon=True)
        browser_thread.start()
        
        # Lancer le dashboard (bloquant)
        print("üöÄ Lancement du dashboard...")
        launch_dashboard_service()
    
    elif choice == '1':
        # API seulement
        print("üîÑ API en cours d'ex√©cution...")
        print("üåê Acc√®s: http://localhost:5000")
        print("‚èπÔ∏è Appuyez sur Ctrl+C pour arr√™ter")
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüëã API arr√™t√©e")
    
    elif choice == '4':
        print("‚úÖ Pipeline termin√© sans lancement de services")
        print("\nüìã Pour lancer manuellement:")
        print("   API: python3 api/prediction_api.py")
        print("   Dashboard: streamlit run dashboard/ml_dashboard.py")

if __name__ == "__main__":
    main()
