#!/usr/bin/env python3
"""
Script de lancement complet du pipeline MLOps
"""
import subprocess
import sys
import time
import threading
from pathlib import Path
import webbrowser
from datetime import datetime
import shutil

def get_python_command():#bref j'avais probl√®me avec python3
    """D√©tecter la commande Python disponible"""
    for cmd in ['python3', 'python']:
        if shutil.which(cmd):
            return cmd
    return 'python3'  # Fallback

def run_command(command, description, background=False):
    """Ex√©cuter une commande avec affichage du statut"""
    print(f"\n {description}...")
    print(f"   Commande: {command}")
    
    if background:
        # Lancer en arri√®re-plan
        process = subprocess.Popen(
            command.split(),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        return process
    else:
        # Lancer et attendre la fin
        result = subprocess.run(
            command.split(),
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print(f"    {description} - Termin√© avec succ√®s")
            if result.stdout:
                print(f"    Sortie: {result.stdout[:200]}...")
        else:
            print(f"    {description} - Erreur")
            if result.stderr:
                print(f"    Erreur: {result.stderr}")
        
        return result

def check_dependencies():
    """V√©rifier et installer les d√©pendances"""
    print("üîç V√©rification des d√©pendances...")
    
    try:
        import streamlit
        import plotly
        import flask
        import mlflow
        print(" Toutes les d√©pendances principales sont install√©es")
        return True
    except ImportError as e:
        print(f" D√©pendance manquante: {e}")
        print(" Installation des d√©pendances...")
        
        result = run_command(
            "pip install -r requirements.txt",
            "Installation des d√©pendances"
        )
        
        return result.returncode == 0

def run_ml_pipeline():
    """Ex√©cuter le pipeline ML complet"""
    print("\n" + "="*60)
    print(" LANCEMENT DU PIPELINE MLOPS")
    print("="*60)
    
    python_cmd = get_python_command()
    
    # √âtape 1: Feature Engineering
    result1 = run_command(
        f"{python_cmd} src/features/advanced_features.py",
        "Feature Engineering Avanc√©"
    )
    
    if result1.returncode != 0:
        print(" Attention: Erreur lors du feature engineering")
        # Continuer quand m√™me si les donn√©es sont d√©j√† trait√©es
    
    # √âtape 2: Entra√Ænement des mod√®les
    result2 = run_command(
        f"{python_cmd} src/models/advanced_training.py",
        "Entra√Ænement des Mod√®les Avanc√©s"
    )
    
    if result2.returncode != 0:
        print(" Attention: Erreur lors de l'entra√Ænement")
    
    # √âtape 3: √âvaluation
    result3 = run_command(
        f"{python_cmd} src/models/advanced_evaluation.py",
        "√âvaluation des Mod√®les"
    )
    
    if result3.returncode != 0:
        print("Attention: Erreur lors de l'√©valuation")
    
    return all(r.returncode == 0 for r in [result1, result2, result3])

def launch_services():
    """Lancer les services (API et Dashboard)"""
    print("\n" + "="*60)
    print(" LANCEMENT DES SERVICES")
    print("="*60)
    
    python_cmd = get_python_command()
    
    # Lancer l'API en arri√®re-plan
    print("\n Lancement de l'API de pr√©diction...")
    api_process = run_command(
        f"{python_cmd} api/prediction_api.py",
        "API de Pr√©diction",
        background=True
    )
    
    # Attendre un peu pour que l'API d√©marre
    time.sleep(3)
    
    # Lancer le dashboard
    print("\n Lancement du dashboard Streamlit...")
    dashboard_process = run_command(
        "streamlit run dashboard/ml_dashboard.py --server.port 8501 --server.headless true",
        "Dashboard Streamlit",
        background=True
    )
    
    return api_process, dashboard_process

def open_browser_tabs():
    """Ouvrir les onglets du navigateur"""
    print("\n Ouverture des interfaces web...")
    
    time.sleep(5)  # Attendre que les services d√©marrent
    
    try:
        # Ouvrir le dashboard
        webbrowser.open('http://localhost:8501')
        print(" Dashboard ouvert: http://localhost:8501")
        
        # Ouvrir l'API docs (health check)
        webbrowser.open('http://localhost:5000/health')
        print(" API health check ouvert: http://localhost:5000/health")
        
    except Exception as e:
        print(f" Impossible d'ouvrir automatiquement le navigateur: {e}")
        print("\n Ouvrez manuellement ces URLs:")
        print("   - Dashboard: http://localhost:8501")
        print("   - API Health: http://localhost:5000/health")

def show_usage_instructions():
    """Afficher les instructions d'utilisation"""
    print("\n" + "="*60)
    print("GUIDE D'UTILISATION")
    print("="*60)
    
    print("\n DASHBOARD STREAMLIT (http://localhost:8501)")
    print("   ‚Ä¢ Vue d'ensemble: M√©triques principales et alertes")
    print("   ‚Ä¢ Performance Mod√®le: √âvaluation d√©taill√©e")
    print("   ‚Ä¢ Monitoring Temps R√©el: Suivi en direct")
    print("   ‚Ä¢ Analyse des Donn√©es: Upload et analyse de fichiers")
    print("   ‚Ä¢ Configuration: Param√®tres du syst√®me")
    
    print("\n API DE PR√âDICTION (http://localhost:5000)")
    print("   ‚Ä¢ /health - V√©rification de sant√©")
    print("   ‚Ä¢ /predict - Pr√©diction unique")
    print("   ‚Ä¢ /predict/batch - Pr√©dictions en lot")
    print("   ‚Ä¢ /monitoring/stats - Statistiques")
    print("   ‚Ä¢ /model/info - Informations du mod√®le")
    
    print("\n EXEMPLES D'UTILISATION DE L'API:")
    print("   # Test de sant√©")
    print("   curl http://localhost:5000/health")
    print("")
    print("   # Pr√©diction")
    print('   curl -X POST http://localhost:5000/predict \\')
    print('     -H "Content-Type: application/json" \\')
    print('     -d \'{"duration": 24, "amount": 5000, "age": 35}\'')
    
    print("\n FICHIERS G√âN√âR√âS:")
    print("   ‚Ä¢ reports/figures/ - Graphiques d'√©valuation")
    print("   ‚Ä¢ reports/metrics/ - M√©triques JSON")
    print("   ‚Ä¢ models/best_model.joblib - Meilleur mod√®le")
    print("   ‚Ä¢ logs/ - Logs d'ex√©cution")

def main():
    """Fonction principale"""
    print(" PIPELINE MLOPS - GERMAN CREDIT RISK PREDICTION")
    print(f" D√©marr√© le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*60)
    
    # V√©rifier les d√©pendances
    if not check_dependencies():
        print(" Impossible de continuer sans les d√©pendances")
        sys.exit(1)
    
    # Demander confirmation pour le pipeline complet
    response = input("\n Voulez-vous ex√©cuter le pipeline ML complet ? (y/n): ").lower()
    
    if response == 'y':
        # Ex√©cuter le pipeline ML
        pipeline_success = run_ml_pipeline()
        
        if not pipeline_success:
            print(" Le pipeline a rencontr√© des erreurs, mais on continue...")
    else:
        print(" Pipeline ML ignor√© - lancement direct des services")
    
    # Lancer les services
    api_process, dashboard_process = launch_services()
    
    # Ouvrir le navigateur dans un thread s√©par√©
    browser_thread = threading.Thread(target=open_browser_tabs)
    browser_thread.daemon = True
    browser_thread.start()
    
    # Afficher les instructions
    show_usage_instructions()
    
    print("\n" + "="*60)
    print(" SYST√àME LANC√â AVEC SUCC√àS")
    print("="*60)
    print(" Les services sont en cours d'ex√©cution...")
    print("  Appuyez sur Ctrl+C pour arr√™ter tous les services")
    
    try:
        # Attendre ind√©finiment
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n\n Arr√™t des services...")
        
        # Arr√™ter les processus
        if api_process:
            api_process.terminate()
            print(" API arr√™t√©e")
        
        if dashboard_process:
            dashboard_process.terminate()
            print(" Dashboard arr√™t√©")
        
        print(" Pipeline MLOps arr√™t√© proprement")

if __name__ == "__main__":
    main()
